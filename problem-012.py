problem = """
The sequence of triangle numbers is generated by adding the natural numbers. So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

# consequtive numbers are always relatively prime

from math import sqrt

def numDivisors(n):
    if n == 1:
        return 1
    numDivisors = 2
    for d in range(2, n/2+1):
        if n % d == 0:
            numDivisors += 1
    return numDivisors

# t_n = n(n+1)/2
# let e_i = 2i
# let o_i = 2i+1
# then t_n = e_(n/2) / 2  *  o_(n/2)           if n is even
#          = o_((n-1)/2)  *  e_((n+1)/2) / 2   if n is odd
# since e_i and o_i are relatively prime,
# and similarly o_i and e_(i+1) are relatively prime,
#
# so the number of divisors is the sum of the two, minus 1 (since they both have 1 as a divisor), plus the number of different products from each
# numDivisors(t_2i) = numDivisors(e_i / 2) + numDivisors(o_i) - 1 + ...
# numDivisors(t_(2i+1)= numDivisors(o_i) + numDivisors(e_(i+1) / 2) + ...

i = 1
numDivisorsOfI = numDivisors(i) # cache
while True:
    numDivisorsOfOdd = numDivisors(2*i+1) # cache
    totalDivisors = numDivisorsOfI + numDivisorsOfOdd - 1 + (numDivisorsOfI-1)*(numDivisorsOfOdd-1)

    if totalDivisors > 500:
        print i*(2*i+1)
        break

    numDivisorsOfIPlusOne = numDivisors(i+1) # cache
    totalDivisors = numDivisorsOfOdd + numDivisorsOfIPlusOne - 1 + (numDivisorsOfOdd-1)*(numDivisorsOfIPlusOne-1)

    if totalDivisors > 500:
        print (2*i+1)*(i+1)
        break
    
    i += 1
    numDivisorsOfI = numDivisorsOfIPlusOne


