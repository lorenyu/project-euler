problem = """
Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

Find the sum of all the even-valued terms in the sequence which do not exceed four million.
"""

# redefine fibonnaci numbers as
# f[n] = n, n = 0 or 1
# f[n] = f[n-1] + f[n-2], n > 1
#
# so first few terms are: 0, 1, 1, 2, 3, 5, 8, ...
#
# Thus, even fibonnaci numbers are f[3n]
#
# since f[n] = f[n-1] + f[n-2]
#
# sum_n=[0..3k] f[n] = 2*(sum_i=[0..k] f[3i])
#
# since sum_i=[0..n] f[i] = f[n+2]-1
#
# sum_i=[0..k] f[3i] = f[3k+2] / 2

def fibonacci(n):
    """Returns nth fibonacci number, where f[0] = 0 and f[1] = 1."""
    if n < 2:
        return n
    f = [0]*4
    f[0] = 0
    f[1] = 1
    i = 2
    while i <= n:
        f[i & 0x3] = f[(i-1) & 0x3] + f[(i-2) & 0x3]
        i += 1
    return f[n & 0x3]

def sumFibbonacci(n):
    """Returns sum_i=[0..n] fib[i]."""
    return fibonacci(n+2)-1

# use circular buffer of size 16
f = [0]*16
f[0] = 0
f[1] = 1
i = 0

# want sum of all even fib[i] such that fib[i] <= 4,000,000.
# By the above analysis, this sum is equal to fib[k+2]/2, where k is largest number such that fib[k] <= 4,000,000.
while  f[i & 0xf] <= 4000000:
    f[(i+2) & 0xf] = f[(i+1) & 0xf] + f[i & 0xf]
    i += 1
i -= 1
while i % 3 != 0:
    i -= 1
print f[(i+2) & 0xf]/2
